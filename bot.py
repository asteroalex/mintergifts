import socketio
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter, TelegramAPIError
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from collections import deque

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
sio = socketio.AsyncClient()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ Telegram
TELEGRAM_TOKEN = '8044348316:AAFLsqU_IVvxZqCqfciNyGH5_48k4rLfKwg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ–ª—É—á–∞—é—Ç –ª–∏ –æ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
users_status = {}

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
allowed_users = set()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º (ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
all_users = {}

# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–º–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ—á–µ—Ä–µ–¥–∏
message_queue = deque()
queue_lock = asyncio.Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class AlertStates(StatesGroup):
    waiting_for_message = State()

class AllAlertStates(StatesGroup):
    waiting_for_message = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id):
    return user_id in allowed_users

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è 'newMint'
@sio.event
async def newMint(data):
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –º–∏–Ω—Ç–µ: {data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    slug = data.get('slug', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    gift_name = data.get('gift_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    number = data.get('number', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    image_preview = data.get('image_preview', None)
    model = data.get('Model', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    backdrop = data.get('backdrop', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    symbol = data.get('Symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = (f"–ù–æ–≤—ã–π –º–∏–Ω—Ç - *{slug}* - *{gift_name}* - *{number}*\n\n"
                         f"Model: {model}\n"
                         f"Backdrop: {backdrop}\n"
                         f"Symbol: {symbol}")
    print(formatted_message)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    button_url = f"https://t.me/nft/{slug}-{number}"
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="See owner üëë", url=button_url)]])

    async with queue_lock:
        message_queue.append((formatted_message, inline_kb))

async def send_message_to_users():
    while True:
        await asyncio.sleep(1)
        async with queue_lock:
            if message_queue:
                message, inline_kb = message_queue.popleft()
                for user_id, status in list(users_status.items()):
                    if status['status'] == 'active':  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        chat_id = status['chat_id']
                        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ chat_id
                        try:
                            await bot.send_message(chat_id=chat_id, text=message, reply_markup=inline_kb)
                        except TelegramRetryAfter as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            await asyncio.sleep(e.retry_after)
                        except TelegramForbiddenError:
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º")
                            del users_status[user_id]
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
async def stop_notifications(user_id):
    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
    if user_id in users_status and users_status[user_id]['status'] == 'active':
        users_status[user_id]['status'] = 'inactive'
        chat_id = users_status[user_id]['chat_id']
        await bot.send_message(chat_id=chat_id, text="""Notification of new mints has been stopped.

Send the /start command to receive notifications again for the next 10 minutes.""")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    if has_access(message.from_user.id):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'active' (–ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        users_status[message.from_user.id] = {'chat_id': message.chat.id, 'status': 'active'}
        await message.reply("""Receiving notifications of new mints is enabled for the next 5 minutes.

Subscribe to our news channel @TGGiftsNews to receive notifications of new gifts.

Bot news channel: @GiftsMinter""")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        asyncio.create_task(stop_notifications(message.from_user.id))
    else:
        await message.reply("You do not have access to this bot. Please purchase access from @BuyGiftsMinterBot.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stop
@dp.message(Command('stop'))
async def stop_command(message: types.Message):
    if has_access(message.from_user.id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if message.from_user.id in users_status:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'inactive' (–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            users_status[message.from_user.id]['status'] = 'inactive'
            await message.reply("""You will no longer receive notifications about new gift mints.

To resume receiving notifications, send the command /start""")
        else:
            await message.reply("You will no longer receive notifications about new gift mints")
    else:
        await message.reply("You do not have access to this bot. Please purchase access from @BuyGiftsMinterBot.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /addtgid
@dp.message(Command('addtgid'))
async def addtgid_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
    if message.from_user.id == 1267171169:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        try:
            user_ids = message.text.split()[1:]
            added_users = []
            for user_id in user_ids:
                new_user_id = int(user_id)
                allowed_users.add(new_user_id)
                # –ü–æ–ª—É—á–∞–µ–º username –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = await bot.get_chat(new_user_id)
                all_users[new_user_id] = new_user.username
                added_users.append(f"{new_user_id} (@{new_user.username})")
            await message.reply(f"Users with IDs {', '.join(added_users)} have been granted access.")
        except (IndexError, ValueError):
            await message.reply("Please provide valid Telegram user IDs.")
        except Exception as e:
            await message.reply(f"An error occurred: {e}")
    else:
        await message.reply("You do not have permission to add users.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /seepeople
@dp.message(Command('seepeople'))
async def seepeople_command(message: types.Message):
    if all_users:
        users_list = "\n\n".join([f"{user_id} (@{username})" for user_id, username in all_users.items()])
        await message.reply(f"Users with access:\n\n{users_list}")
    else:
        await message.reply("No users have been granted access yet.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /newalert
@dp.message(Command('newalert'))
async def newalert_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
    if message.from_user.id == 1267171169:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        await message.reply("Please send the message you want to broadcast.")
        await state.set_state(AlertStates.waiting_for_message)
    else:
        await message.reply("You do not have permission to send alerts.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(AlertStates.waiting_for_message)
async def alert_message_received(message: types.Message, state: FSMContext):
    alert_message = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–æ—Å—Ç—É–ø–æ–º
    for user_id in allowed_users:
        chat_id = users_status.get(user_id, {}).get('chat_id')
        if chat_id:
            try:
                await bot.send_message(chat_id=chat_id, text=alert_message)
            except TelegramForbiddenError:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /newallalert
@dp.message(Command('newallalert'))
async def newallalert_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
    if message.from_user.id == 1267171169:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        await message.reply("Please send the message you want to broadcast to all users.")
        await state.set_state(AllAlertStates.waiting_for_message)
    else:
        await message.reply("You do not have permission to send alerts to all users.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message(AllAlertStates.waiting_for_message)
async def allalert_message_received(message: types.Message, state: FSMContext):
    alert_message = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id, status in list(users_status.items()):
        chat_id = status.get('chat_id')
        if chat_id:
            try:
                await bot.send_message(chat_id=chat_id, text=alert_message)
            except TelegramForbiddenError:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /updateserver
@dp.message(Command('updateserver'))
async def updateserver_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID)
    if message.from_user.id in [1267171169, 6695944947]:
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        await message.reply("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        await reconnect_to_server()
        await message.reply("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await message.reply("You do not have permission to update the server connection.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /downserver
@dp.message(Command('downserver'))
async def downserver_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID)
    if message.from_user.id in [1267171169, 6695944947]:
        print("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        await message.reply("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        await disconnect_from_server()
        await message.reply("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    else:
        await message.reply("You do not have permission to disconnect the server.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
@sio.event
async def connect():
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@sio.event
async def message(data):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if isinstance(data, dict) and 'gift_name' in data and 'number' in data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
        gift_name = data.get('gift_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        number = data.get('number', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        model = data.get('Model', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        backdrop = data.get('backdrop', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        symbol = data.get('Symbol', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        image_preview = data.get('image_preview', None)
        formatted_message = (
            f"üéÅ New mint - {gift_name} - #{number}\n\n"
            f"Model: {model}\n"
            f"Backdrop: {backdrop}\n"
            f"Symbol: {symbol}"
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
        button_url = f"https://t.me/nft/{gift_name}-{number}"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="See owner üëë", url=button_url)]])

        async with queue_lock:
            message_queue.append((formatted_message, inline_kb))

@sio.event
async def connect_error(data):
    print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", data)

@sio.event
async def disconnect():
    print("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    await reconnect_to_server()

async def reconnect_to_server():
    while not sio.connected:
        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        try:
            await sio.connect('https://gsocket.trump.tg')
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def disconnect_from_server():
    if sio.connected:
        await sio.disconnect()
        print("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

async def connect_to_server():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        await sio.connect('https://gsocket.trump.tg')
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def main():
    await connect_to_server()
    asyncio.create_task(send_message_to_users())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())